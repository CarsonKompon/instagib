@using System;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Network;
@using Instagib.Social;
@inherits Panel
@attribute [StyleSheet]

@namespace Instagib

<root>
    <div class="logo-container">
        <h1>
            @if (true)
            {
                var str = "GIBLETZ";
                for (int i = 0; i < str.Length; i++)
                {
                    <label class="glowchar">@str[i]</label>
                }
            }
        </h1>
        <div class="author">
            @if (true)
            {
                var str = "By Carson Kompon";
                for (int i = 0; i < str.Length; i++)
                {
                    if (str[i] == ' ')
                    {
                        <div class="space" />
                    }
                    else
                    {
                        <label class="glowchar">@str[i]</label>
                    }
                }
            }
        </div>
        <div class="splash-text">@SplashTexts[SplashIndex]</div>
    </div>

    <div class="menu">
        @if (MainMenu.Instance.IsPauseMenu)
        {
            <label class="btn" onclick=@(() => MainMenu.Instance.IsHidden = true)>Resume</label>
        }
        else
        {
            <a href="/play">Play</a>
        }
        @* <a href="/customize">Customize</a> *@
        <a href="/stats">Stats</a>
        <a href="/settings">Settings</a>
        @if (MainMenu.Instance.IsPauseMenu)
        {
            <label class="btn" onclick=@QuitToMainMenu>Quit to Main Menu</label>
        }
        else
        {
            <label class="btn" onclick=@Game.Close>Quit</label>
        }
    </div>

    <div class="my-player">
        @if (CameraTexture is not null)
        {
            <Image class="player-cam" Texture=@CameraTexture />
        }
        else
        {
            <div class="player-cam placeholder" />
        }
        @if (CharacterDresser is not null)
        {
            <label class="player-name" style="color: @(CharacterDresser.Color.Saturate(-0.2f).Hex);">@Connection.Local.DisplayName</label>
        }
    </div>
</root>

@code
{
    public string[] SplashTexts = new string[]
    {
"erm... it's gibbing instant ðŸ’…",
"Long Live Alex's Instagib!",
"Also check out RATZ",
"Instantaneous Giblification",
"1 shot, 1 kill",
"s&box oh s&box...",
"ðŸ”«ðŸ”«ðŸ”«",
"This is a video game",
"Head Clicking Simulator",
"aimtraining.exe"
    };

    public int SplashIndex = 0;

    CameraComponent CharacterCam;
    Texture CameraTexture;
    PlayerDresser CharacterDresser;

    void QuitToMainMenu()
    {
        Networking.Disconnect();
        Scene.Load(MainMenu.Instance.GameScene);
    }
    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (firstTime)
        {
            SplashIndex = new Random().Next(0, SplashTexts.Length);

            CharacterCam = Scene.GetAllComponents<CameraComponent>().FirstOrDefault(x => x.Tags.Has("charactercam"));
            CharacterDresser = Scene.GetAllComponents<PlayerDresser>().FirstOrDefault();
            CameraTexture = Texture.CreateRenderTarget("charactercam", ImageFormat.RGBA8888, 2048);
            StateHasChanged();
        }
    }

    public override void Tick()
    {
        CharacterCam?.RenderToTexture(CameraTexture);
    }
}