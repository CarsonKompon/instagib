@using System;
@using Sandbox;
@using Sandbox.UI;
@namespace Instagib
@inherits PanelComponent

<root>
	@if (!GameManager.Instance.InGame) return;
	@if (GameManager.Instance.ClientLoading)
	{
		<div class="loading">
			<h1>LOADING...</h1>
			<label>Downloading map @(GameManager.Instance.MapInstance.MapName)...</label>
			<i>refresh</i>
		</div>
		return;
	}
	else if (GameManager.Instance.ServerLoading)
	{
		<div class="loading">
			<h1>LOADING...</h1>
			<label>Waiting for host to download map...</label>
		</div>
		return;
	}

	<div class="crosshair" />

	<div class="top-bar">

		<div class="info">
			<label class="fraglimit">Frag Limit: @(GameManager.Instance.FragLimit)</label>
			<label class="timer">@GetGameTimer()</label>
		</div>

		<div class="leaderboard">
			@if (true)
			{
				@foreach (var client in Scene.GetAllComponents<Client>().OrderBy(x => -x.Kills))
				{
					<div class="entry @(client.Network.IsOwner ? "isme" : "")" style="background-color: @(client.ColorString)">
						@if (client.IsBot)
						{
							<img src="ui/icons/bot.png" class="avatar" />
						}
						else
						{
							<img src="@($"avatar:{client.Network.OwnerConnection.SteamId}")" class="avatar" />
						}
						<label class="name">@client.GameObject.Name</label>
						<div class="score">@client.Kills</div>
					</div>
				}
			}
		</div>
	</div>

	@if (!Player.Local.IsValid())
	{
		var isValid = Client.Local.IsValid();
		<div class="banner">
			@if (!isValid || Client.Local.TimeSinceLastDeath < 5)
			{
				<h1>You can respawn in @(isValid ? (5 - Math.Floor(Client.Local.TimeSinceLastDeath)) : 5) seconds...</h1>
			}
			else
			{
				<h1>Press @(Input.GetButtonOrigin("Jump").ToUpper()) to respawn</h1>
			}
		</div>
	}

</root>

@code
{

	TimeSince timeSinceRefresh = 0f;

	string GetGameTimer()
	{
		var time = MathF.Floor(GameManager.Instance.Timer);
		var minutes = MathF.Floor(time / 60);
		var seconds = time % 60;

		return $"{minutes:00}:{seconds:00}";
	}

	protected override int BuildHash() => System.HashCode.Combine(MathF.Floor(timeSinceRefresh), Player.Local.IsValid());
}